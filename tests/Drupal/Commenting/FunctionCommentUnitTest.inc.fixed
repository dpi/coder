<?php

/**
 * @file
 * Some function comment tests.
 */

/**
 * Test.
 *
 * @param string $x
 *   Comment does not end with full stop.
 * @param string $y
 *   comment does not start with a capital letter.
 */
function foo($x, $y) {

}

/**
 * Missing exception description in the throws tag, which is OK.
 *
 * @throws \Drupal\locale\StringStorageException
 */
function test1() {

}

/**
 * Wrong indentation of description for the throws tag.
 *
 * @throws \Drupal\locale\StringStorageException
 *  Description here.
 */
function test2() {

}

/**
 * Description for the throws tag does not start with capital letter.
 *
 * @throws \Drupal\locale\StringStorageException
 *   description here.
 */
function test3() {

}

/**
 * Description for the throws tag does not end with a dot.
 *
 * @throws \Drupal\locale\StringStorageException
 *   Description here
 */
function test4() {

}

/**
 * Description for the throws tag must be on the next line.
 *
 * @throws \Drupal\locale\StringStorageException Description here.
 */
function test5() {

}

/**
 * Some description.
 *
 * @param string $foo
 *   Some parameter that does not exist.
 */
function test6() {

}

/**
 *
 */
function test7() {
  // Missing function doc here.
}

/**
 * Test methods.
 */
class Test {

  /**
   *
   */
  public function undocumented() {

  }

  /**
   * This should be a doc comment.
   */
  public function wrong() {

  }

}

/**
 * Some comment.
 *
 * @param int $x
 *   Description should be on the next line.
 */
function test8($x) {

}

/**
 * Default implementation of a menu item (without a page or form controller).
 *
 * UML:
 * @link http://drupal7demo.webel.com.au/node/1017 DefaultMenuItem @endlink.
 *
 * @param int $foo
 *   Test.
 */
function test9($foo) {

}

/**
 * Default implementation of a menu item (without a page or form controller).
 *
 * UML:
 * @link http://drupal7demo.webel.com.au/node/1017 DefaultMenuItem @endlink.
 *
 * @param int $foo
 *   Test.
 */
function test10($foo) {

}

/**
 * A function may throw multiple exceptions.
 *
 * @throws \Exception
 *   Thrown when something bad happens.
 * @throws \InvalidArgumentException
 *   Thrown when an argument is invalid.
 */
function test11() {

}

/**
 * Update or set users expiration time.
 *
 * @param object $user
 * @param int $timespan
 *   (seconds)
 */
function test12($user, $timespan) {

}

/**
 * Update or set users expiration time.
 *
 * @param object $user
 *   Object type hint in comment without real type hint is allowed.
 */
function test13($user) {

}

/**
 * Update or set users expiration time.
 *
 * @param object $user
 *   Object stdClass type hint is allowed for object.
 */
function test14(stdClass $user) {

}

/**
 * Array parameter type mismatch.
 *
 * @param array $foo
 *   Comment here.
 */
function test15(Test $foo) {

}

/**
 * This should be converted into a doc comment.
 */
function test16() {

}

/**
 * Return comment indentation should be three spaces.
 *
 * @return string
 *   This is not indented correctly.
 */
function test17() {
  return '1';
}

/**
 * Return comment indentation should be three spaces.
 *
 * @return string
 *   This is not indented correctly.
 */
function test18() {
  return '1';
}

/**
 * Return comment indentation should be three spaces.
 *
 * @return string
 *   This is not indented correctly. Continues on the next line because this is a
 *   really long sentence.
 */
function test19() {
  return '1';
}

/**
 * Multiple errors in @param line.
 *
 * @param string $arg1
 *   This should be in next line and needs period.
 */
function test20($arg1) {
}

/**
 * Testing fix of incorrect param types.
 *
 * @param array $arg1
 *   The parameter type is not valid.
 * @param int|bool $arg2
 *   One of the parameter types listed is not valid.
 * @param int|bool|array $arg3
 *   All of the parameter types listed are not valid.
 */
function test21($arg1, $arg2, $arg3) {
}

/**
 * Test for allowed param var types.
 *
 * @param array|bool|float|int|mixed|object|string|resource|callable $arg1
 *   All of the above types are valid.
 * @param array|bool|int|string|object|null $arg2
 *   All of the above types are invalid.
 * @param array|bool|int|string $arg3
 *   All of the above types are invalid.
 * @param mixed $arg4
 *   All of the above types are invalid.
 * @param false|true|int $arg5
 *   All of the above types are invalid.
 * @param bool|int $arg6
 *   All of the above types are invalid.
 */
function test22($arg1, $arg2, $arg3, $arg4, $arg5, $arg6) {
}

/**
 * Void returns allowed when null is given in @return.
 *
 * When null is a potential return value it should be allowed to have return
 * statements with void return as well.
 *
 * @return bool|null
 *   This implies that the return value can be NULL, a boolean, or empty.
 */
function test23() {
  if (1 == 2) {
    return;
  }
  return TRUE;
}

/**
 * Even when null is given in @return there must be at least 1 valid return.
 *
 * When null is a potential return value it should be allowed to have return
 * statements with void return. This does not mean that all returns can be void.
 * There must be at least one non-void return.
 *
 * @return bool|null
 *   This implies that the return value can be NULL, a boolean, or empty.
 */
function test24() {
  if (1 == 2) {
    return;
  }
  return;
}

/**
 * The shorthand array syntax should not be used as a return type.
 *
 * @return array
 *   The array.
 */
function test25() {
  return [];
}

/**
 * Type declarations should not have any illegal characters.
 *
 * @param \Illeal $var
 *   This asterisk does not belong here.
 *
 * @return \SomeNamespace
 *   This should not have a forward slash.
 */
function test26($var) {
  return '';
}

/**
 * Data types with spaces.
 *
 * @param array<int, \stdClass> $x
 *   We don't care that data types contain spaces.
 *
 * @return array<int, \stdClass>
 *   Same spaces in data type here.
 */
function test27($x) {
  return 0;
}

/**
 * Return docs should not contain variable names.
 *
 * @return string
 *   The profile.
 */
function test28() {
  $profile = 'x';
  return $profile;
}

/**
 * Not fixable return comment.
 *
 * @return string $profile more confusing text here.
 *   The profile.
 */
function test29() {
  $profile = 'x';
  return $profile;
}

/**
 * Indentation of param comment is wrong.
 *
 * @param string $xml_response
 *   String returned from CreateClientProfile.
 *
 * @return mixed
 *   Return fetched bookings or log error.
 */
function test30($xml_response) {

}

/**
 * Class Test.
 */
class Test2 extends AbstractTest {

  /**
   * Run method with missing described variable.
   *
   * @param object $start
   *   Start point.
   *
   * @return bool
   *   Result.
   */
  public function run(\stdClass $start, \stdClass $stop) {
    return TRUE;
  }

}

/**
 * Comment of param is just one word, which means it is the data type.
 *
 * @param array $a
 * @param array $b
 */
function test31($a, $b) {

}

/**
 *
 */
class PostcodeAnywhere_Interactive_Find {

  /**
   * The username associated with the Royal Mail license (not required for click licenses).
   */
  private $UserName;
  /**
   * Holds the results of the query.
   */
  private $Data;

  /**
   *
   */
  public function PostcodeAnywhere_Interactive_Find($Key, $SearchTerm, $PreferredLanguage, $Filter, $UserName) {
    $this->Key = $Key;
    $this->SearchTerm = $SearchTerm;
    $this->PreferredLanguage = $PreferredLanguage;
    $this->Filter = $Filter;
    $this->UserName = $UserName;
  }

}

/**
 * There should be no dots.
 *
 * @param string $a
 *   Some comment.
 * @param string $b
 *   Another comment.
 */
function test32($a, $b) {

}

/**
 * There should be no dots and comments should be on the next line.
 *
 * @param string $a
 *   Some comment.
 * @param string $b
 *   Another comment.
 */
function test33($a, $b) {

}

/**
 * Yield should be a recognised return statement.
 *
 * @return int
 *   Integer value.
 */
function test34($a, $b) {
  for ($i = 1; $i <= 3; $i++) {
    yield $i;
  }
}

/**
 * Using \stdClass as type hint is ok, but not in the documentation.
 *
 * @param object $name
 *   Some description.
 * @param object $param2
 *   Some description.
 */
function test35(\stdClass $name, \stdClass $param2) {

}

/**
 * Allow "object" as real type hint (PHP 7.2).
 *
 * @param object $arg
 *   Something here.
 * @param object $blarg
 *   Another thing.
 */
function test36(object $arg, object $blarg) {
  return $arg;
}

/**
 * A class with a method that has the same name as the class.
 */
class Small {

  /**
   * Our small constructor.
   */
  public function __construct() {
  }

  /**
   * Return tag should be allowed here.
   *
   * @return string
   *   Something small.
   */
  public function small() {
    return 'string';
  }

}

/**
 * Some short comment.
 *
 * @param array $matches
 *   An array of matches by a preg_replace_callback() call that scans for
 *   @import-ed CSS files, except for external CSS files.
 * @param array $sub_key
 *   An array containing the sub-keys specifying the library asset, e.g.
 *   @code['js']@endcode or @code['css', 'component']@endcode
 * @param string $to
 *   The email address or addresses where the message will be sent to. The
 *   formatting of this string will be validated with the
 *   @link http://php.net/manual/filter.filters.validate.php PHP email @endlink.
 */
function test37(array $matches, array $sub_key, $to) {

}

/**
 * Yield from should be a recognised return statement.
 *
 * @return Generator
 *   Generator value.
 */
function test38($a, $b) {
  yield from [$a, $b];
}

/**
 * Allow "mixed" as real type hint (PHP 8.0).
 *
 * @param mixed $arg
 *   Something here.
 */
function test39(mixed $arg) {
  return $arg;
}

/**
 * Test multiline comments with excess spaces in the param annotation.
 */
class Test40 {

  /**
   * Test method.
   *
   * @param string $errorMessage
   *   It only breaks when this comment spans multiple lines but won't break if
   *   you put it on a single line.
   */
  public function test41(string $errorMessage) {

  }

}

/**
 * Generics test.
 *
 * @param T $object
 *   Template.
 *
 * @template T
 *
 * @return T
 */
function test40(object $object) {
  return clone $object;
}

/**
 * PHPStan: Basic types.
 *
 * @param int $param1
 *   Parameter.
 * @param string $param2
 *   Parameter.
 * @param array-key $param3
 *   Parameter.
 * @param bool $param4
 *   Parameter.
 * @param true $param5
 *   Parameter.
 * @param false $param6
 *   Parameter.
 * @param null $param7
 *   Parameter.
 * @param float $param8
 *   Parameter.
 * @param double $param9
 *   Parameter.
 * @param scalar $param10
 *   Parameter.
 * @param array $param11
 *   Parameter.
 * @param iterable $param12
 *   Parameter.
 * @param callable $param13
 *   Parameter.
 * @param resource $param14
 *   Parameter.
 * @param void $param15
 *   Parameter.
 * @param object $param16
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#basic-types
 */
function test41(int $param1, string $param2, mixed $param3, bool $param4, mixed $param5, mixed $param6, mixed $param7, float $param8, double $param9, mixed $param10, array $param11, iterable $param12, callable $param13, mixed $param14, mixed $param15, object $param16) {
  return 0;
}

/**
 * PHPStan: Integer ranges.
 *
 * @param positive-int $param1
 *   Parameter.
 * @param negative-int $param2
 *   Parameter.
 * @param int<0, 100> $param3
 *   Parameter.
 * @param int<min, 100> $param4
 *   Parameter.
 * @param int<50, max> $param5
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#integer-ranges
 */
function test42(mixed $param1, mixed $param2, mixed $param3, mixed $param4, mixed $param5) {
  return 0;
}

/**
 * PHPStan: General arrays.
 *
 * @param Type[] $param1
 *   Parmameter.
 * @param array<Type> $param2
 *   Parmameter.
 * @param array<int, Type> $param3
 *   Parmameter.
 * @param non-empty-array<Type> $param4
 *   Parmameter.
 * @param non-empty-array<int, Type> $param5
 *   Parmameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#general-arrays
 */
function test43(mixed $param1, mixed $param2, mixed $param3, mixed $param4, mixed $param5) {
  return 0;
}

/**
 * PHPStan: Key and value types of arrays and iterables.
 *
 * @param key-of<Type::ARRAY_CONST> $param1
 *   Parameter.
 * @param value-of<Type::ARRAY_CONST> $param2
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#key-and-value-types-of-arrays-and-iterables
 */
function test44(mixed $param1, mixed $param2) {
  return 0;
}

/**
 * PHPStan: Iterables.
 *
 * @param iterable<Type> $param1
 *   Parameter.
 * @param Collection<Type> $param2
 *   Parameter.
 * @param Collection<int, Type> $param3
 *   Parameter.
 * @param Collection|Type[] $param4
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#iterables
 */
function test45(mixed $param1, mixed $param2, mixed $param3, mixed $param4) {
  return 0;
}

/**
 * PHPStan: Union types.
 *
 * @param Type1|Type2 $param1
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#union-types
 */
function test46(mixed $param1) {
  return 0;
}

/**
 * PHPStan: Intersection types.
 *
 * @param Type1&Type2 $param1
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#intersection-types
 */
function test47(mixed $param1) {
  return 0;
}

/**
 * PHPStan: Parentheses.
 *
 * @param (Type1&Type2)|Type3 $param1
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#parentheses
 */
function test48(mixed $param1) {
  return 0;
}

/**
 * PHPStan: static and $this.
 *
 * @param static $param1
 *   Parameter.
 * @param $this $param2
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#static-and-%24this
 */
function test49(mixed $param1, mixed $param2) {
  return 0;
}

/**
 * PHPStan: class-string.
 *
 * @param class-string $param1
 *   Parameter.
 * @param class-string<Foo> $param2
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#class-string
 */
function test50(mixed $param1, mixed $param2) {
  return 0;
}

/**
 * PHPStan: Other advanced string types.
 *
 * @param callable-string $param1
 *   Parameter.
 * @param numeric-string $param2
 *   Parameter.
 * @param non-empty-string $param3
 *   Parameter.
 * @param literal-string $param4
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#other-advanced-string-types
 */
function test51(mixed $param1, mixed $param2, mixed $param3, mixed $param4) {
  return 0;
}


/**
 * PHPStan: Array shapes.
 *
 * @param array{'foo': int, "bar": string} $param1
 *   Parameter.
 * @param array{0: int, 1?: int} $param2
 *   Parameter.
 * @param array{int, int} $param3
 *   Parameter.
 * @param array{foo: int, bar: string} $param4
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#array-shapes
 */
function test52(mixed $param1, mixed $param2, mixed $param3, mixed $param4) {
  return 0;
}

/**
 * PHPStan: Literals and constants.
 *
 * @param 234 $param1
 *   Parameter.
 * @param 1.0 $param2
 *   Parameter.
 * @param 'foo'|'bar' $param3
 *   Parameter.
 * @param Foo::SOME_CONSTANT $param4
 *   Parameter.
 * @param Foo::SOME_CONSTANT|Bar::OTHER_CONSTANT $param5
 *   Parameter.
 * @param Foo::* $param6
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#literals-and-constants
 */
function test53(mixed $param1, mixed $param2, mixed $param3, mixed $param4, mixed $param5, mixed $param6) {
  return 0;
}


/**
 * PHPStan: Callables.
 *
 * callable(int, int): string $param1
 *   Parameter.
 * callable(int, int=): string $param2
 *   Parameter.
 * callable(int $foo, string $bar): void $param3
 *   Parameter.
 * callable(string &$bar): mixed $param4
 *   Parameter.
 * callable(float ...$floats): (int|null) $param5
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#callables
 */
function test54(mixed $param1, mixed $param2, mixed $param3, mixed $param4, mixed $param5) {
  return 0;
}

/**
 * PHPStan: Bottom type.
 *
 * @param never $param1
 *   Parameter.
 * @param never-return $param2
 *   Parameter.
 * @param never-returns $param3
 *   Parameter.
 * @param no-return $param4
 *   Parameter.
 *
 * @see https://phpstan.org/writing-php-code/phpdoc-types#bottom-type
 */
function test55(mixed $param1, mixed $param2, mixed $param3, mixed $param4) {
  return 0;
}
